POM.XML

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>k8s.kubectl</groupId>
  <artifactId>test</artifactId>
  <packaging>jar</packaging>
  <version>0.0.1-SNAPSHOT</version>

  <name>test</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/io.fabric8/kubernetes-client -->
	<dependency>
	    <groupId>io.fabric8</groupId>
	    <artifactId>kubernetes-client</artifactId>
	    <version>5.12.0</version>
	</dependency>
  </dependencies>
  
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
        	<archive>
				<manifest>
					<addClasspath>true</addClasspath>
					<mainClass>k8s.kubectl.test.KubeConfigFileClientExample</mainClass>
				</manifest>
			</archive>
        </configuration>
      </plugin>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.8.1</version>
      <configuration>
        <source>1.8</source>
        <target>1.8</target>
      </configuration>
    </plugin>
    
    <plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-assembly-plugin</artifactId>
	    <version>3.1.0</version>
	    <configuration>
	        <descriptorRefs>
	            <descriptorRef>jar-with-dependencies</descriptorRef>
	        </descriptorRefs>
	    </configuration>
	    <executions>
	        <execution>
	            <phase>package</phase>
	            <goals>
	                <goal>single</goal>
	            </goals>
	        </execution>
	    </executions>
	</plugin>
	</plugins>
</build>
</project>

★ KubectlCMD

package k8s.kubectl.test;

import java.util.ArrayList;
import java.util.List;

import io.fabric8.kubernetes.client.ConfigBuilder;
import io.fabric8.kubernetes.client.DefaultKubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClient;

public class KubectlCMD {
	
	public KubernetesClient makeConnection(String url, String token){
		  
		ConfigBuilder configBuilder = new ConfigBuilder();
		configBuilder.withMasterUrl(url);
		configBuilder.withOauthToken(token);
		configBuilder.withTrustCerts(true); //인증서 신뢰성 검사 x 안할거면 https://hasiki.tistory.com/5  필요
			
		return new DefaultKubernetesClient(configBuilder.build()); 
	}
	
	
	public List<String> getPodList(String namespace, KubernetesClient client){
		 
		List<String> list = new ArrayList<String>();
		try{
		client.pods().inNamespace(namespace).list().getItems().forEach( 
				  pod -> list.add(pod.getMetadata().getName()));
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return list;
	}
	
	
	public List<String> getNamespaceList(KubernetesClient client){
		List<String> list = new ArrayList<String>(); 
		
		try {
			client.namespaces().list().getItems().forEach( 
					  namespace -> list.add(namespace.getMetadata().getName()));
		} catch (Exception e){
			e.printStackTrace();
		}
		
		return list;
	}
}

★ PodLog

package k8s.kubectl.test;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.AbstractButton;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import io.fabric8.kubernetes.client.KubernetesClient;

public class PodLog extends JFrame {
	
	static JLabel siteLabel = new JLabel("Select Site");
	static JTextArea textArea = new JTextArea("POD LOG ", 7 ,20);
	public static JPanel leftpanel = new JPanel();
	static JPanel rightpanel = new JPanel();
	static JPanel topPanel = new JPanel();
	static JPanel bottomPanel = new JPanel();
	static ArrayList<String> siteList;
	static KubectlCMD kubecmd = new KubectlCMD();
	static KubernetesClient client;
	static JComboBox<String> sitecombo;
	static Map<String,String> sitemap = new HashMap<String,String>();
	
	static String currentSite;
	static String currentNamespace;
	
	
	static FileOutputStream fo;
	
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PodLog frame = new PodLog();
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	public PodLog() throws Exception{
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 800);
		this.getContentPane().setLayout(new BorderLayout(5,2));
		
		
		leftpanel.setLayout(new BoxLayout(leftpanel, BoxLayout.Y_AXIS));
		rightpanel.setLayout(new BoxLayout(rightpanel, BoxLayout.Y_AXIS));
		topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.X_AXIS));
		bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));
		
		textArea.setFont(new Font("Courier", Font.PLAIN, 15));
		

		
		this.getContentPane().add(new JScrollPane(leftpanel), BorderLayout.WEST);
		this.getContentPane().add(new JScrollPane(rightpanel), BorderLayout.EAST);
		this.getContentPane().add(topPanel, BorderLayout.NORTH);
		this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
		

		siteLabel.setFont(new Font("", Font.BOLD, 20));
		siteLabel.setForeground(Color.BLUE);
		
		
		topPanel.add(siteLabel, BorderLayout.NORTH);
		
		this.getContentPane().add(new JScrollPane(textArea), BorderLayout.CENTER);
//		this.getContentPane().add(new JScrollPane(chartPanel), BorderLayout.CENTER);
//		chartPanel.setVisible(false);
		
		
	    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("site.prof")));
	   
	    siteList = new ArrayList<String>();
	    String tempinfo;
	    List<String> combositelist = new ArrayList<String>();
	    while ((tempinfo = br.readLine()) != null)
	    {
	      siteList.add(tempinfo);
	    }
	    String[] siteinfo;
	    
	    for (int i = 0; i < siteList.size(); i++)
	    {
	      tempinfo = (String)siteList.get(i);
	      
	      siteinfo = tempinfo.split(":");
	      
	      if(siteinfo[0].charAt(0) == '#') continue;
	      
//	      System.out.println(siteinfo[0] + " " +siteinfo[1]+" " + siteinfo[2] + " " + siteinfo[3]);
	      
	      if(!sitemap.containsKey(siteinfo[0])){
	    	  sitemap.put(siteinfo[0], tempinfo);
	    	  combositelist.add(siteinfo[0]);
	      }
	      
//	      addButtonSite(siteinfo[0], siteinfo[1], siteinfo[2], siteinfo[3], getContentPane());

	    }
	    
	    sitecombo = new JComboBox(combositelist.toArray());
	    sitecombo.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				String[] siteinfo = sitemap.get(sitecombo.getSelectedItem().toString()).split(":");
				
				currentSite = siteinfo[0];
				
				leftpanel.removeAll();
				rightpanel.removeAll();
				
//				System.out.println("https://" + hostip +":"+port + " " + token);
				client = kubecmd.makeConnection("https://" + siteinfo[1] +":"+siteinfo[2], siteinfo[3]);
				List<String> namespaceslist = kubecmd.getNamespaceList(client);
				
				for(int i = 0 ; i < namespaceslist.size(); i++){
					addButtonNamespace(namespaceslist.get(i), getContentPane());
				}
				

				siteLabel.setText(currentSite);
				getContentPane().setVisible(false);
				getContentPane().setVisible(true);
				
			}
		});
	    	
	    sitecombo.setSelectedIndex(0);
	    
	    
	    topPanel.add( sitecombo, BorderLayout.NORTH);

	    
	    
//	    addButtonModule("po", getContentPane());
//	    addButtonModule("deployment", getContentPane());
//	    addButtonModule("pvc", getContentPane());
//	    addButtonModule("pv", getContentPane());
//	    addButtonModule("service", getContentPane());
//	    addButtonModule("ingress", getContentPane());
//	    
//	    addButtonModule("memuse", getContentPane());
//	    addButtonModule("allocCPU", getContentPane());
	    
	}
	
	
	//Site 버튼 : 선택한 site 정보 저장 및 해당 site의 namespace 버튼 생성
	public static void addButtonSite(final String buttonName, final String hostip, final String port, final String token, final Container container ){
		
		JButton siteButton = new JButton(buttonName);
		siteButton.setBackground(Color.WHITE);
		
		siteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				try{
				
					for (int i = 0; i < topPanel.getComponentCount(); i++){
						topPanel.getComponent(i).setBackground(Color.WHITE);
			        }
			        
			        AbstractButton btn = (AbstractButton) e.getSource();
			        btn.setBackground(Color.MAGENTA);
			        
			        currentSite = buttonName;
					
					leftpanel.removeAll();
					rightpanel.removeAll();
					
	//				System.out.println("https://" + hostip +":"+port + " " + token);
					client = kubecmd.makeConnection("https://" + hostip +":"+port, token);
					List<String> namespaceslist = kubecmd.getNamespaceList(client);
					
					for(int i = 0 ; i < namespaceslist.size(); i++){
						addButtonNamespace(namespaceslist.get(i), container);
					}
					
	
					siteLabel.setText(currentSite);
					container.setVisible(false);
					container.setVisible(true);
				} catch(Throwable t) {
					
					t.printStackTrace();
					currentSite = "Select Site";
					
					container.setVisible(false);
					container.setVisible(true);
				}
			}
		});
		topPanel.add( siteButton, BorderLayout.NORTH);
	}
	
	
	//Site 버튼 : 선택한 site 정보 저장 및 해당 site의 namespace 버튼 생성
		public static void addComboSite(final String buttonName, final String hostip, final String port, final String token, final Container container ){
			
			JButton siteButton = new JButton(buttonName);
			siteButton.setBackground(Color.WHITE);
			
			siteButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					try{
					
						for (int i = 0; i < topPanel.getComponentCount(); i++){
							topPanel.getComponent(i).setBackground(Color.WHITE);
				        }
				        
				        AbstractButton btn = (AbstractButton) e.getSource();
				        btn.setBackground(Color.MAGENTA);
				        
				        currentSite = buttonName;
						
						leftpanel.removeAll();
						rightpanel.removeAll();
						
						
		//				System.out.println("https://" + hostip +":"+port + " " + token);
						client = kubecmd.makeConnection("https://" + hostip +":"+port, token);
						List<String> namespaceslist = kubecmd.getNamespaceList(client);
						
						for(int i = 0 ; i < namespaceslist.size(); i++){
							addButtonNamespace(namespaceslist.get(i), container);
						}
						
		
						siteLabel.setText(currentSite);
						container.setVisible(false);
						container.setVisible(true);
					} catch(Throwable t) {
						
						t.printStackTrace();
						currentSite = "Select Site";
						
						container.setVisible(false);
						container.setVisible(true);
					}
				}
			});
			topPanel.add( siteButton, BorderLayout.NORTH);
		}
	
	
	
	//namespace 버튼 : 해당 namespace에 존재하는 모듈 리스트 조회 및 describe 버튼 생성 (최초는 'po' 로 지정)
	public static void addButtonNamespace(final String buttonName, final Container container ){
		

		JButton button = new JButton(buttonName);
		button.setBackground(Color.WHITE);
		
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				rightpanel.removeAll();
				currentNamespace = buttonName;
				
				
				for (int i = 0; i < leftpanel.getComponentCount(); i++){
					leftpanel.getComponent(i).setBackground(Color.WHITE);
		        }
				
				
		        AbstractButton btn = (AbstractButton) e.getSource();
		        btn.setBackground(Color.ORANGE);
		        
		        
		        List<String> podlist = kubecmd.getPodList(buttonName, client);
				
				
				for(int i = 0 ; i < podlist.size(); i++){
					addButtonModuleInfo(buttonName, podlist.get(i), container);
				}
				
				siteLabel.setText(currentSite + " " + currentNamespace);
				container.setVisible(false);
				container.setVisible(true);
		  }
		});
		leftpanel.add( button, BorderLayout.CENTER);
	}
	
	
	
	public static void addButtonModuleInfo(final String namespace, final String buttonName, final Container container ) {
		
			
	
			JButton PodButton = new JButton(buttonName);
			PodButton.setBackground(Color.WHITE);
			
			PodButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					for (int i = 0; i < rightpanel.getComponentCount(); i++){
			        	rightpanel.getComponent(i).setBackground(Color.WHITE);
			        }
			        
			        AbstractButton btn = (AbstractButton) e.getSource();
			        btn.setBackground(Color.green);
			        
			        System.out.println(namespace + " " + buttonName);
					
					try {
						
						if(fo != null) {
							fo.close();
						}
						
						String logfilename = namespace + " " + buttonName + " " + System.currentTimeMillis();
						fo = new FileOutputStream(new File(logfilename));
						client.pods().inNamespace(namespace).withName(buttonName).watchLog(fo);
						Runtime rt = Runtime.getRuntime();
						Process pro;
						
						System.out.println("baretail.exe "+ logfilename);
						
						pro = rt.exec("baretail.exe "+ "\""+ logfilename+ "\"");
						
						
						
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			});
			rightpanel.add(PodButton, BorderLayout.CENTER);
		}

}
