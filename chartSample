---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: devops-jjm-hpa
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: devops-jjm-deployment
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 70

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: devops-jjm-deployment
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: devops-jjm
        release: devops-jjm
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: release
                  operator: In
                  values:
                  - devops-jjm 
              topologyKey: kubernetes.io/hostname
      containers:
        - name: devops-jjm-pod
          image: "imagename"
          imagePullPolicy: Always
          ports:
            - name: web
              containerPort: 8000
          env:
            - name: TZ
              value: Asia/Seoul
            - name: API_VERSION 
              value: v1 
          readinessProbe:
            exec:
              command:
              - /root/health-check.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
              - /root/health-check.sh 
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 2
              memory: 4Gi
          volumeMounts:
          - mountPath: /logs
            name: devops-jjm-pv
      dnsPolicy: ClusterFirst
      hostAliases:
      - ip: "111.111.111.111"
        hostnames:
        - "hostname"
      imagePullSecrets:
        - name: redii
      nodeSelector:
        kubernetes.io/nodetype: app
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 400
      volumes:
      - name: devops-jjm-pv
        persistentVolumeClaim:
          claimName: devops-jjm-pvc


---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: devops-jjm-ing
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller
  annotations:
    ingress.kubernetes.io/connection-proxy-header: keep-alive
    ingress.kubernetes.io/proxy-body-size: 10m
    ingress.kubernetes.io/proxy-read-timeout: "300"
    ingress.kubernetes.io/proxy-send-timeout: "300"
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: ictdevap.sec.samsung.net
    http:
      paths:
      - backend:
          serviceName: devops-jjm-service
          servicePort: 8000
        path: /
  
  
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: devops-jjm-netpol
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller
spec:
  podSelector:
    matchLabels:
      release: devops-jjm
  ingress:
  - ports:
    - protocol: TCP
      port: 8000
  policyTypes:
  - Ingress
  
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: devops-jjm-pv
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: "/naspath"
    server: "nasip"


---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: devops-jjm-pvc
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    diskid: diskid-01
    heritage: Tiller
spec:
  accessModes:
  - ReadWriteMany
  dataSource: null
  resources:
    requests:
      storage: 100Gi
  volumeMode: Filesystem
  volumeName: devops-jjm-pv 
status:
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 100Gi
  phase: Bound
  
---
apiVersion: v1
kind: Service
metadata:
  name: devops-jjm-service
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 80
    targetPort: 8000
    protocol: TCP
  selector:
    app: devops-jjm
    release: devops-jjm
---
apiVersion: v1
kind: Service
metadata:
  name: devops-jjm-service-nodeport
  labels:
    app: devops-jjm
    chart: devops-jjm-0.01
    release: devops-jjm
    heritage: Tiller   
spec:
  type: NodePort
  ports:
  - name: node-web
    nodePort:  30010
    port: 80
    protocol: TCP
    targetPort: 8000
  selector:
    app: devops-jjm
    release: devops-jjm
    
    
kubectl apply -f devopsDeploy --recursive


 FROM "os, jvm 설치된 base Image"
 
 #JAVA_HOME 설정
 ENV JAVA_HOME /usr/lib/jvm/zulu8.52.0.23-ca-jdk8.0.282-linux_x64

 #실행할 jar, pod health check shell, jar 실행 shell Image에 복사 
 COPY ./hello-devops.jar /root/
 COPY ./health-check.sh /root/
 COPY ./start.sh /root/

 #실행 권한 부여 및 실행 
 RUN chmod +x /root/start.sh
 CMD ["/root/start.sh"]

 WORKDIR /
